name: Build And Release On Push To Master
on:
  push:
    branches: [master]

jobs:
  test-editor:
    name: Test Editor
    runs-on: ubuntu-latest
    env:
      UTOPIA_SHA: ${{ github.sha }}
    steps:
      - name: Cancel existing runs on this branch
        uses: fauguste/auto-cancellation-running-action@0.1.4
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Cache .pnpm-store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Cache editor test result
        id: cache-editor-tests
        uses: actions/cache@v2
        with:
          # For the tests it doesn't really matter what we cache
          path: editor/lib
          key: ${{ runner.os }}-editor-tests-master-2-${{ hashFiles('editor/src/**') }}-${{ hashFiles('utopia-api/src/**') }}-${{ hashFiles('utopia-vscode-common/src/**')}}-${{ hashFiles('editor/package.json') }}-${{ hashFiles('utopia-api/package.json') }}
      - name: Install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=https://github.com/NixOS/nixpkgs/archive/6120ac5cd201f6cb593d1b80e861be0342495be9.tar.gz
      - name: Run the tests
        if: steps.cache-editor-tests.outputs.cache-hit != 'true'
        run: nix-shell --arg includeServerBuildSupport false --arg includeRunLocallySupport false --run check-editor-all-ci
      - name: Discord Notification
        uses: Ilshidur/action-discord@0.3.2
        if: failure()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_BUILD_WEBHOOK }}
          DISCORD_USERNAME: 'Build Failure'
        with:
          args: 'Editor Tests Failed: https://github.com/{{ GITHUB_REPOSITORY }}/actions/runs/{{ GITHUB_RUN_ID }}'

  test-server:
    name: Test Server
    runs-on: ubuntu-latest
    env:
      UTOPIA_SHA: ${{ github.sha }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Cache ~/.cabal/packages
        uses: actions/cache@v2
        with:
          path: ~/.cabal/packages
          key: ${{ runner.os }}-${{ matrix.ghc }}-cabal-packages-2
      - name: Cache ~/.cabal/store
        uses: actions/cache@v2
        with:
          path: ~/.cabal/store
          key: ${{ runner.os }}-${{ matrix.ghc }}-cabal-store-2
      - name: Cache dist-newstyle
        uses: actions/cache@v2
        with:
          path: server/dist-newstyle
          key: ${{ runner.os }}-${{ matrix.ghc }}-server-dist-newstyle-2
      - name: Cache server test result
        id: cache-server-tests
        uses: actions/cache@v2
        with:
          # For the tests it doesn't really matter what we cache
          path: server/src
          key: ${{ runner.os }}-server-tests-master-${{ hashFiles('server/src/**') }}-${{ hashFiles('server/test/**') }}-${{ hashFiles('server/cabal.project.freeze') }}
      - name: Install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=https://github.com/NixOS/nixpkgs/archive/6120ac5cd201f6cb593d1b80e861be0342495be9.tar.gz
      - name: Start PostgreSQL
        run: nix-shell --arg includeEditorBuildSupport false --arg includeRunLocallySupport false --arg includeDatabaseSupport true --run start-postgres-background
      - name: Run the tests
        if: steps.cache-server-tests.outputs.cache-hit != 'true'
        run: nix-shell --arg includeEditorBuildSupport false --arg includeRunLocallySupport false --run test-server-ci
      - name: Discord Notification
        uses: Ilshidur/action-discord@0.3.2
        if: failure()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_BUILD_WEBHOOK }}
          DISCORD_USERNAME: 'Build Failure'
        with:
          args: 'Server Tests Failed: https://github.com/{{ GITHUB_REPOSITORY }}/actions/runs/{{ GITHUB_RUN_ID }}'

  trigger-deploy:
    name: Trigger Deploy
    needs: [test-editor, test-server]
    runs-on: ubuntu-latest
    steps:
      - name: Use repository dispatch event to trigger deploy
        uses: peter-evans/repository-dispatch@v1.1.0
        with:
          token: ${{ secrets.DEPLOY_REPO_ACCESS_TOKEN }}
          repository: concrete-utopia/utopia-deploy
          event-type: trigger-deploy

  performance-test:
    name: Run Performance Tests
    runs-on: self-hosted
    needs: deploy-staging
    env:
      UTOPIA_SHA: ${{ github.sha }}
      AUTH0_CLIENT_ID: KB7euFO46rVYeOaWmrEdktdhAFxEO266
      AUTH0_ENDPOINT: enter.utopia.app
      AUTH0_REDIRECT_URI: https://utopia.pizza/authenticate
    steps:
      # Gets the branch that this PR is targeting and replaces forward slashes in the name with hyphens.
      # So that later steps can produce a bundle incorporating that into the name and upload it.
      - name: Extract branch name
        shell: bash
        run: |
          FIXED_REF="${GITHUB_HEAD_REF////-}"
          echo "##[set-output name=branch;]$FIXED_REF"
        id: extract_branch
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Cache .pnpm-store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Build Performance Tests
        run: |
          nix-shell --arg includeServerBuildSupport false --arg includeRunLocallySupport false --run "build-puppeteer-tests"
      - name: Run Performance Test
        id: run-performance-test
        env:
          AWS_S3_BUCKET: ${{secrets.PERFORMANCE_GRAPHS_BUCKET}}
          AWS_ACCESS_KEY_ID: ${{ secrets.PERFORMANCE_GRAPHS_ACCESS_KEY}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PERFORMANCE_GRAPHS_SECRET_KEY }}
          AWS_REGION: ${{ secrets.STAGING_BUNDLE_REGION }}
          PERFORMANCE_GRAPHS_PLOTLY_USERNAME: ${{ secrets.PERFORMANCE_GRAPHS_PLOTLY_USERNAME}}
          PERFORMANCE_GRAPHS_PLOTLY_API_KEY: ${{secrets.PERFORMANCE_GRAPHS_PLOTLY_API_KEY}}
        run: |
          nix-shell --arg includeServerBuildSupport false --arg includeRunLocallySupport false --run "xvfb-run --server-args='-screen 0 1920x1080x24 -ac -nolisten tcp -dpi 96 +extension RANDR' run-puppeteer-test"
      - name: Build Discord Message
        env:
          TEMPLATE: >-
            [
              {
                "title": $title,
                "url": $html_url,
                "color": 2369839,
                "description": $description,
                "fields": [
                  {
                    "name": "This PR:",
                    "value": $staging_message
                  },
                  {
                    "name": "Current Staging:",
                    "value": $master_message
                  }
                ],
                "footer": {
                  "text": $repo_full_name
                }
              },
              {
                "title": "This PR:",
                "color": 2369839,
                "image": {
                  "url": $staging_chart
                }
              },
              {
                "title": "Current Staging:",
                "color": 14540253,
                "image": {
                  "url": $master_chart
                }
              }
            ]
          TITLE: 'MASTER Performance Results for #${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }}'
          HTML_URL: ${{ github.event.pull_request.html_url }}
          DESCRIPTION: 'Link to master: https://${{ secrets.STAGING_SERVER }}/p/'
          REPO_FULL_NAME: ${{ github.event.repository.full_name }}
          STAGING_MESSAGE: ${{ steps.run-performance-test.outputs.perf-message-staging }}
          STAGING_CHART: ${{ steps.run-performance-test.outputs.perf-chart-staging }}
          MASTER_MESSAGE: ${{ steps.run-performance-test.outputs.perf-message-master }}
          MASTER_CHART: ${{ steps.run-performance-test.outputs.perf-chart-master }}
        run: |
          echo "DISCORD_EMBEDS=$(jq -nc --arg title "$TITLE" --arg html_url "$HTML_URL" --arg description "$DESCRIPTION" --arg repo_full_name "$REPO_FULL_NAME" --arg staging_message "$STAGING_MESSAGE" --arg master_message "$MASTER_MESSAGE" --arg staging_chart "$STAGING_CHART" --arg master_chart "$MASTER_CHART" "$TEMPLATE")" >> $GITHUB_ENV
      - name: Send Discord Notification
        uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_PRS_WEBHOOK }}
          DISCORD_USERNAME: 'Puppeteer'
          DISCORD_AVATAR: https://octodex.github.com/images/puppeteer.png
          MESSAGE: 'Performance results for #${{ github.event.pull_request.number }}'
        with:
          args: ${{ env.MESSAGE }}

